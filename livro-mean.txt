(M)ongoDB
	MongoDB (http://www.mongodb.org)
(E)xpress
	Express (http://expressjs.com) , criado em 2009 por TJ Holowaychuk, é um framework web light-weight que ajuda na organização de sua aplicação web na arquitetura MVC no lado do servidor.
(A)ngularJS
	AngularJS (http://angularjs.org/) é um framework MVC no lado do cliente voltado para Single Page Web Applications (SPA) criado pela Google
(N)odeJs
	Node.js (http://nodejs.org) é uma plataforma para aplicações JavaScript criada por Ryan Dahl sob o ambiente de execução JavaScript do Chrome.


Grunt (http://gruntjs.com) para automatizar tarefas e
Bower (http://bower.io) para gerenciar nossos pacotes de front-end.

Vamos criar testes unitários utilizando o Karma/Jasmine e testes end-to-end (e2e) com Protractor.
Integraremos nossa aplicação com o Travis, um servidor de integração contínua gratuito para projetos open source.

página 9
Capítulo 2 Express: framework web para Node.js

contatooh
	app
		controllers -> controladores chamados pelas rotas da aplicação
		models -> models que representam o domínio do problema
		routes -> rotas da aplicação
		views -> views do template engine
	config -> configuração do express, banco de dados etc.
	public -> todos os arquivos acessíveis diretamente pelo navegador

O arquivo package.json possui informações sobre o projeto. Podemos criar na mão ou utilizar:
	npm init

Instalação do Express: npm install express@4.8 --save
o --save grava em package.json a dependência e sua versão.

npm install: É altamente encorajado distribuir sua aplicação sem a pasta node_modules e deixar que as dependências listadas no arquivo package.json sejam baixadas através do comando npm install. A razão disso é que o Node.js pode ter compilado algum módulo nativamente para sua máquina e isso pode não funcionar em outro sistema operacional. Rodando npm install, temos a garantia de que os módulos serão compilados na máquina que rodará nossa aplicação.

Podemos agrupar as configurações do Express em três grupos: variáveis de ambiente, middlewares e rotas.

O middleware express.static:
	Para fazer com que os arquivos dentro da pasta public sejam acessíveis pelo usuário através do navegador:
		app.use(express.static('./public'));

		recebe ./public por que a referência é aonde é executado o arquivo Node(nosso server.js que está na raiz do contatooh)

A pasta public conterá os arquivos HTML ????

View e template engine:
	EJS (http://embeddedjs.com) que possui uma sintaxe similar ao HTML.
	npm install ejs --save


Ao mover o index.html para a pasta app/views como ejs, ninguém mais poderia visualizar o arquivo, já que não está mais em uma pasta definida como pública. Aqui entra o arquivo de rotas:

Controllers, cada controller criado define através de uma propriedade ( estilo java script) as funções de controle, e depois no arquivo de rotas definimos qual URL atende qual método.

nodemon
=======
Precisamos reiniciar o servidor toda vez que realizarmos alterações. Podemos resolver este problema usando o nodemon: 

	npm install nodemon -g
	nodemon server

Com o nodemon, ele fica monitorando e toda vez que alterarmos um arquivo ele irá reiniciar o servidor para nós.


É possível carregar as dependências com o Express load, sem ter que ficar utilizando required para carregar dependencias a todo momento
express-load (https://github.com/jarradseers/express-load)
	npm install express-load --save

	com isso conseguimos colocar o segundo comando:

    load('models', {cwd: 'app'})
    .then('controllers')
    .then('routes')
    .into(app);

É importante ressaltar que a ordem faz diferença. Um ponto importante é que precisamos carregar as pastas seguindo a ordemmodels, controllers e routes, caso contrário não conseguiremos, por exemplo, ter acesso aos nossos controllers em nossas rotas caso os módulos com nossos controllers tenham sido carregados por último.

Pasta padrão
O parâmetro {cwd: ‘app’} foi necessário para mudar o diretório padrão, pois a função procura as pastas no diretório raiz contatooh e precisamos que ela considere a pasta contatooh/app.

RETORNANDO ARQUIVOS JSON

	module.exports = function() {
		var controller = {};
		
		controller.listaContatos = function(req, res) {
			res.json(contatos);
		};
		
		return controller;
	};
